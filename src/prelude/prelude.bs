extern i32_lt(a: i32, b: i32) -> bool;
extern i32_gt(a: i32, b: i32) -> bool;
extern i32_eq(a: i32, b: i32) -> bool;
extern i32_add(a: i32, b: i32) -> i32;
extern i32_sub(a: i32, b: i32) -> i32;
extern i32_mul(a: i32, b: i32) -> i32;
extern i32_mod(a: i32, b: i32) -> i32;
extern i32_div(a: i32, b: i32) -> i32;
extern putchar(a: i32) -> i32;
extern rand() -> i32;

let rev_tc(n, acc) {
    if i32_eq(n, 0) {
        acc
    } else {
        let n_mod_10 = i32_mod(n, 10);
        let n_div_10 = i32_div(n, 10);
        let acc = i32_add(n_mod_10, i32_mul(10, acc));
        rev_tc(n_div_10, acc)
    }
}

let i32_print(n) {
    if i32_lt(n, 10) {
        putchar(i32_add(n, 48))
    } else {
        let div = i32_div(n, 10);
        let rem = i32_mod(n, 10);

        let discard = i32_print(div);
        putchar(i32_add(rem, 48))
    }
}
